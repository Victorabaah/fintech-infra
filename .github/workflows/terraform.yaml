permissions:
  id-token: write # Required for OIDC authentication
  contents: read # Required for actions/checkout

name: Terraform-AWS-Infra-Deployment

on:
  pull_request:
    branches: [main]

  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment Environment (dev, qa, uat, prod)"
        required: true
        default: "prod"
      region:
        description: "AWS Region"
        required: true
        default: "us-east-2"
      action:
        description: "Terraform action: apply (default) or destroy"
        required: false
        default: "apply"

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

jobs:
  plan:
    name: Plan
    runs-on: ubuntu-latest
    env:
      TF_ENV: ${{ github.event.inputs.environment || 'prod' }}
      AWS_REGION: ${{ github.event.inputs.region || 'us-east-2' }}
      TF_DIR: ${{ github.event.inputs.environment || 'prod' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Verify working dir
        run: |
          echo "Looking in './${{ env.TF_DIR }}'"
          ls -l ./${{ env.TF_DIR }}

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -upgrade -backend-config="key=${{ env.TF_ENV }}/terraform.tfstate"

      - name: Terraform plan
        working-directory: ${{ env.TF_DIR }}
        run: terraform plan -lock=false

  approve:
    name: Await Approval
    runs-on: ubuntu-latest
    needs: plan
    environment: ${{ github.event.inputs.environment || 'prod' }}
    steps:
      - run: echo "✅ Approve or ❌ Reject in the Actions UI."

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: approve
    env:
      TF_ENV: ${{ github.event.inputs.environment || 'prod' }}
      AWS_REGION: ${{ github.event.inputs.region || 'us-east-2' }}
      TF_DIR: ${{ github.event.inputs.environment || 'prod' }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform init
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -backend-config="key=${{ env.TF_ENV }}/terraform.tfstate"

      - name: Terraform Apply
        if: ${{ github.event.inputs.action != 'destroy' }}
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve -lock=false

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_DIR }}
        env:
          TF_LOG: DEBUG
          AWS_METADATA_SERVICE_TIMEOUT: 10
          AWS_METADATA_SERVICE_NUM_ATTEMPTS: 5
          AWS_RETRY_MODE: standard
          AWS_MAX_ATTEMPTS: 10
        run: |
          echo "⚠️ Starting Terraform Destroy"
          terraform destroy -auto-approve -lock=false || {
            echo "❌ Terraform destroy failed. Retrying in 15 seconds..."
            sleep 15
            terraform destroy -auto-approve -lock=false
          }
